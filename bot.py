import config
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

import logic 

bot = telebot.TeleBot(config.API_TOKEN)

logic.setup_database()


def main_markup():
  markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
  markup.add(KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º'))
  markup.add(KeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'), KeyboardButton('üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É'))
  markup.add(KeyboardButton('‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ'))
  return markup

def add_to_favorite_markup(movie_id, user_id):
    is_favorite = logic.is_movie_in_favorites(user_id, movie_id) 
    markup = InlineKeyboardMarkup()
    if is_favorite:
        markup.add(InlineKeyboardButton("üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f'unfavorite_{movie_id}'))
    else:
        markup.add(InlineKeyboardButton("üåü –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f'favorite_{movie_id}'))
    return markup

def create_movie_selection_markup(movies_data_list):
    markup = InlineKeyboardMarkup()
    for movie_data in movies_data_list[:5]: 
        movie_year = movie_data['release_date'][:4] if movie_data['release_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
        translated_title = logic.translate_text(movie_data['title']) 
        markup.add(InlineKeyboardButton(f"{translated_title.strip()} ({movie_year})", callback_data=f"show_movie_{movie_data['ID']}"))
    return markup

def create_genre_selection_markup(genres_data_list):
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for genre_data in genres_data_list:
        genre_id = genre_data['genre_ID']
        genre_name_english = genre_data['genre']
        translated_genre_name = logic.translate_text(genre_name_english) 
        buttons.append(InlineKeyboardButton(translated_genre_name, callback_data=f"genre_{genre_id}"))
    markup.add(*buttons)
    return markup

def send_movie_info_message(chat_id, movie_data, user_id=None, message_id_to_edit=None):
    if not movie_data:
        bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    translated_title = logic.translate_text(movie_data['title'])
    translated_genres_text = logic.translate_text(movie_data['genres'] or '–ù–µ —É–∫–∞–∑–∞–Ω—ã')
    translated_overview = logic.translate_text(movie_data['overview'])
    movie_year = movie_data['release_date'][:4] if movie_data['release_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'

    info = f"""
üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:</b> {translated_title.strip()}
üóì <b>–ì–æ–¥:</b> {movie_year}
üé≠ <b>–ñ–∞–Ω—Ä—ã:</b> {translated_genres_text.strip()}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ IMDB:</b> {movie_data['vote_average']} / 10

üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{translated_overview.strip()}
"""
    markup = add_to_favorite_markup(movie_data['ID'], user_id)
    
    if message_id_to_edit:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text=info, reply_markup=markup, parse_mode="HTML")
    else:
        bot.send_message(chat_id=chat_id, text=info, reply_markup=markup, parse_mode="HTML")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ-–ë–æ—Çüé•!
–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Ç—ã—Å—è—á–∏ —Ñ–∏–ª—å–º–æ–≤ üî•

<b>–ß—Ç–æ —è –º–æ–≥—É:</b>
- –ù–∞–∂–º–∏ "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º.
- –ù–∞–∂–º–∏ "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é" —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º.
- –ù–∞–∂–º–∏ "üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É", —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä.
- –ù–∞–∂–º–∏ "‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã.

–î–∞–≤–∞–π –Ω–∞–π–¥–µ–º –æ—Ç–ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å–º—ã! üé¨
""", reply_markup=main_markup(), parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º' or message.text == '/random')
def random_movie_command(message):
    movie_data = logic.get_random_movie_data()
    if movie_data:
        send_movie_info_message(message.chat.id, movie_data, message.from_user.id)
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º.")

@bot.message_handler(func=lambda message: message.text == 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é' or message.text == '/search_by_title')
def ask_for_title_command(message): 
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ:")
    bot.register_next_step_handler(message, process_title_search_input) 

def process_title_search_input(message):
    user_original_query = message.text.strip() 

    found_movies = logic.search_movies_by_title_in_db(user_original_query)

    if not found_movies:
        bot.send_message(message.chat.id, "–•–º, –¥–∞–π –º–Ω–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
        english_query = logic.translate_text(user_original_query, target_lang='en', source_lang='ru')
        if english_query and english_query.lower() != user_original_query.lower():
            found_movies = logic.search_movies_by_title_in_db(english_query)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.")

    if found_movies:
        if len(found_movies) == 1:
            bot.send_message(message.chat.id, "–ö–æ–Ω–µ—á–Ω–æ! –Ø –Ω–∞—à–µ–ª —ç—Ç–æ—Ç —Ñ–∏–ª—å–ºüòå")
            send_movie_info_message(message.chat.id, found_movies[0], message.from_user.id)
        else:
            bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:",
                             reply_markup=create_movie_selection_markup(found_movies))
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–ºüòû")

@bot.message_handler(func=lambda message: message.text == 'üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É' or message.text == '/search_by_genre')
def list_genres_command(message):
    genres_data = logic.get_all_genres_from_db()
    if genres_data:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=create_genre_selection_markup(genres_data))
    else:
        bot.send_message(message.chat.id, "–ñ–∞–Ω—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.message_handler(func=lambda message: message.text == '‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ' or message.text == '/my_favorites')
def list_my_favorites_command(message):
    user_id = message.from_user.id
    favorite_movies = logic.get_favorite_movies_from_db(user_id)

    if favorite_movies:
        response = "üåü <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:</b>\n\n"
        for i, movie in enumerate(favorite_movies):
            movie_year = movie['release_date'][:4] if movie['release_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            translated_title = logic.translate_text(movie['title']) 
            response += f"{i+1}. {translated_title.strip()} ({movie_year})\n"
        bot.send_message(message.chat.id, response, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! ‚ú®")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    chat_id = call.message.chat.id

    if call.data.startswith("favorite_"):
        movie_id = int(call.data.split('_')[1])
        if logic.add_movie_to_favorites(user_id, movie_id):
            bot.answer_callback_query(call.id, "–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚ú®")
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —Ñ–∏–ª—å–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.", show_alert=True)
        
        movie_data_for_update = logic.get_movie_data_by_id(movie_id)
        if movie_data_for_update:
            send_movie_info_message(chat_id, movie_data_for_update, user_id, message_id)

    elif call.data.startswith("unfavorite_"):
        movie_id = int(call.data.split('_')[1])
        logic.remove_movie_from_favorites(user_id, movie_id)
        bot.answer_callback_query(call.id, "–§–∏–ª—å–º —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ! üíî")

        movie_data_for_update = logic.get_movie_data_by_id(movie_id)
        if movie_data_for_update:
            send_movie_info_message(chat_id, movie_data_for_update, user_id, message_id)

    elif call.data.startswith("show_movie_"):
        movie_id = int(call.data.split('_')[2]) 
        movie_data = logic.get_movie_data_by_id(movie_id)
        if movie_data:
            bot.delete_message(chat_id, message_id)
            send_movie_info_message(chat_id, movie_data, user_id)
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif call.data.startswith("genre_"):
        genre_id = int(call.data.split('_')[1])
        genre_name_english = logic.get_genre_name_by_id(genre_id)
        genre_name_russian = logic.translate_text(genre_name_english) if genre_name_english else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä"
        
        movies_by_genre = logic.get_movies_by_genre_id_from_db(genre_id)

        if movies_by_genre:
            response_text = f"–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ <b>{genre_name_russian}</b>:\n\n"
            for i, movie in enumerate(movies_by_genre):
                movie_year = movie['release_date'][:4] if movie['release_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
                translated_title = logic.translate_text(movie['title']) 
                response_text += f"{i+1}. {translated_title.strip()} ({movie_year})\n"
            selection_markup = create_movie_selection_markup(movies_by_genre)
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=response_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=selection_markup, parse_mode="HTML")
        else:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ '{genre_name_russian}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def echo_message(message):
    process_title_search_input(message)

bot.infinity_polling()
